{"version":3,"sources":["webpack:///webpack/bootstrap 76198d0e3f47eb7c2fb2?6eef*******","webpack:///./js/algos.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AChEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,wBAAwB,EAAE;AACnE,yCAAyC,wBAAwB;AACjE,sCAAsC,wBAAwB","file":"algosEntry.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 76198d0e3f47eb7c2fb2","const binarySearch = (array, value) => {\n  let guess\n    , min = 0\n    , max = array.length -1\n\n  while(min <= max){\n    guess = Math.floor((min+max)/2)\n    if(value === array[guess]){\n      return guess\n    } else if( value < array[guess]){\n      max = guess - 1\n    } else {\n      min = guess + 1\n    }\n  }\n  return -1\n}\n\nconsole.log('Value found at Index: ', binarySearch([2,4,6,8,10], 8))\n//-------------------------------------------------------------------------------------\n//Median of 2 sorted arrays\n//http://www.geeksforgeeks.org/median-of-two-sorted-arrays/\n\n//-------------------------------------------------------------------------------------\n\nfunction Node(data){\n  this.data = data\n  this.left = null\n  this.right = null\n}\n\nclass BinarySearchTree{\n  constructor(){\n    this._root = null\n  }\n  add(data){\n    const node = new Node(data)\n    if(!this.root){\n      this.root = node\n    } else {\n      let current = this.root\n      while(current){\n        if(node.data < current.data){\n          if(!current.left){\n            current.left = node\n            break\n          }\n          current = current.left\n        } else if (node.data > current.data ){\n          if(!current.right){\n            current.right = node\n            break\n          }\n          current = current.right\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  contains(data){\n    let current = this.root\n    while(current){\n      if(current.data === data){\n        return true\n      } else if(data < current.data){\n        current = current.left\n      } else {\n        current = current.right\n      }\n    }\n    return false\n  }\n  print(){\n    if(!this.root){\n      throw new Error('Binary Tree is Empty')\n    }\n    const newline = new Node('|')\n    const queue = [this.root, newline]\n    let result = ''\n    while(queue.length){\n      const node = queue.shift()\n      result += `${node.data.toString()}`\n      if(node === newline && queue.length){\n        queue.push(newline)\n      }\n      if(node.left){\n        queue.push(node.left)\n      }\n      if(node.right){\n        queue.push(node.right)\n      }\n    }\n    return result.slice(0,-1)\n  }\n  /*\n   * Breadth First search\n   */\n  traverseBFS(fn){\n    this.queue = []\n    this.queue.push(this.root)\n    while(this.queue.length){\n      const node = this.queue.shift()\n      if(fn){\n        fn(node)\n      }\n      if(node.left){\n        this.queue.push(node.left)\n      }\n      if(node.right){\n        this.queue.push(node.right)\n      }\n    }\n  }\n  traverseDFS(fn, method){\n    const current = this.root\n    if(method){\n      this[`_${method}`](current, fn)\n    } else {\n      this._preOrder(current, fn)\n    }\n  }\n  /*\n   * Pre order\n   */\n  _preOrder(node, fn){\n    if(node){\n      if(fn){\n        fn(node)\n      }\n      this._preOrder(node.left, fn)\n      this._preOrder(node.right, fn)\n    }\n  }\n  _postOrder(node, fn){\n    if(node){\n      this._postOrder(node.left, fn)\n      this._postOrder(node.right, fn)\n      if(fn){\n        fn(node)\n      }\n    }\n  }\n  _inOrder(node, fn){\n    if(node){\n      this._inOrder(node.left, fn)\n      if(fn){\n        fn(node)\n      }\n      this._inOrder(node.right, fn)\n    }\n  }\n  getMin(node){\n    if(!node){\n      node = this.root\n    }\n    while(node.left){\n      node = node.left\n    }\n    return node.data\n  }\n  getMax(node){\n    if(!node){\n      node = this.root\n    }\n    while(node.right){\n      node = node.right\n    }\n    return node.data\n  }\n  remove(data){\n    const that = this\n    const removeNode = (node, data) => {\n      if(!node){\n        return null\n      }\n      if(data === node.data){\n        if(!node.left && !node.right){\n          return null\n        }\n        if(!node.left){\n          return node.right\n        }\n        if(!node.right){\n          return node.left\n        }\n        //has both left and right children\n        const temp = this.getMin(node.right)\n        node.data = temp\n        node.right = removeNode(node.right, temp)\n        return node\n      } else if( data < node.data ){\n        node.left = removeNode(node.left, data)\n        return node\n      } else {\n        node.right = removeNode(node.right, data)\n        return node\n      }\n    }\n    this.root = removeNode(this.root, data)\n  }\n}\nconst binarySearchTree = new BinarySearchTree();\nbinarySearchTree.add(5);\nbinarySearchTree.add(3);\nbinarySearchTree.add(7);\nbinarySearchTree.add(2);\nbinarySearchTree.add(4);\nbinarySearchTree.add(6);\nbinarySearchTree.add(8);\nconsole.log(binarySearchTree.print())\n// binarySearchTree.traverseBFS(node => { console.log(node.data); })\n// binarySearchTree.traverseDFS(node => { console.log(node.data)})\nbinarySearchTree.traverseDFS(node => { console.log(node.data)}, 'inOrder')\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/algos.js\n// module id = 9\n// module chunks = 8"],"sourceRoot":""}